{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","class","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","reactDOM","render","document","querySelector"],"mappings":"gNAGMA,EAAe,CACjBC,OAAO,CACHC,KAAM,sBACNC,SAAU,OAEdC,OAAO,CACHF,KAAM,sBACNC,SAAU,cA+BHE,EAfO,SAACC,GACnB,IAbeC,EAAKC,EAadC,GAbSF,EAaUD,EAAMC,KAbXC,GAagB,IAAIE,MAAOC,YAXnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAU,SAGpBA,EAAM,EAAI,SAAW,UAQhC,EAA0BP,EAAaS,GAAhCP,EAAP,EAAOA,KAAMC,EAAb,EAAaA,SAIb,OACQ,sBAAKS,UAAS,yBAAoBH,GAAlC,UACA,mBAAGG,UAAS,2BAAsBT,EAAtB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,4BAAuBT,EAAvB,eCjClBU,EAAS,SAACP,GACZ,OAGI,qBAAKQ,MAAM,mBAAX,SACI,qBAAKA,MAAM,qBAAX,SAAiCR,EAAMS,aAOnDF,EAAQG,aAAe,CACnBD,QAAS,cAGEF,QCbTI,E,4MACFC,MAAM,CAAEX,IAAK,KAAMY,aAAc,I,uDAIlC,WAAoB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAClB,IAAMiB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,2BAI9C,WACC,OAAGc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMX,IAC/B,0CACOsB,KAAKX,MAAMC,iBAIxBU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMX,IAChC,cAAC,EAAD,CAAeA,IAAKsB,KAAKX,MAAMX,MAGnC,cAAC,EAAD,CAASQ,QAAQ,qC,oBAKxB,WACI,OAAO,qBAAKH,UAAW,aAAhB,SACFiB,KAAKC,sB,GA9BAC,IAAMC,WAqCxBC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,cAAc,Y","file":"static/js/main.a5ed1b92.chunk.js","sourcesContent":["import './seasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer:{\n        text: 'Lets hit the Beach!',\n        iconName: 'sun'\n    },\n    winter:{\n        text: 'Burr, it is Chilly!',\n        iconName: 'snowflake'\n    }\n}\n\nconst getSeason = (lat, month) => {\n\n    if( month > 2 && month < 9 ) {\n        return lat > 0 ? 'summer': 'winter';\n    }\n    else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n\n};\n\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const {text, iconName } = seasonConfig[season];//text,iconName\n\n    \n\n    return (\n            <div className={`season-display ${season}`}>\n            <i className={`iconLeft massive ${iconName} icon`}/>\n            <h1>{text}</h1>\n            <i className={`iconRight massive ${iconName} icon`}/>\n        </div>\n    );\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\n\nconst Spinner =(props)=>{\n    return (\n\n       \n        <div class=\"ui active dimmer\">\n            <div class=\"ui big text loader\">{props.message}</div>\n        </div>\n       \n       \n    )\n};\n\nSpinner.defaultProps = {\n    message: \"Loading...\"\n};\n\nexport default Spinner;","import React from  'react';\nimport reactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner'\n\n\nclass App extends React.Component {\n    state={ lat: null, errorMessage: ''};\n\n\n\n   componentDidMount(){\n    window.navigator.geolocation.getCurrentPosition(\n        position=>  this.setState({lat : position.coords.latitude}),\n        err=>  this.setState({ errorMessage: err.message }) \n    );\n   }\n\n   renderContent(){\n    if(this.state.errorMessage && !this.state.lat){\n        return <div>\n              Error: {this.state.errorMessage}\n        </div>\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n        return <SeasonDisplay lat={this.state.lat} />\n    }\n\n    return <Spinner message=\"Please accept location request\" />;\n\n   }\n\n\n    render() {\n        return <div className= \"border red\">\n            {this.renderContent()}\n            </div>\n  \n    }\n\n}\n\nreactDOM.render(<App/>, document.querySelector(\"#root\"));\n\n\n\n\n// utilized both functional components and classed based components\n// made use of the state system\n// \n// helped understand the lifecylce events\n//\n\n"],"sourceRoot":""}